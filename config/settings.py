"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.23.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

from decouple import Csv, config
from dotenv import load_dotenv
from dj_database_url import parse as db_url

load_dotenv()
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

SITE_ID = 1
SITE = {"front": {"protocol": "https", "url": "brisf.ir"}}

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv(
    "SECRET_KEY",
    default="django-insecure-1aexmk-ef)_)(^grkc$4_6azv^lbkv*jzvrd%9zk+rl=y0(er8",
)
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", cast=bool)

ALLOWED_HOSTS = ["*"]


# Application definition
EVENT_ABOZAR_APPS = [
    "account.apps.AccountConfig",
    "common",
    "monitoring",
    "festival",
    "siteinfo",
    "province",
    "content",
    "info",
]

THIRD_PARTY_APPS = [
    "corsheaders",
    "drf_spectacular",
    "rest_framework",
    "rest_framework_simplejwt",
    "django_celery_beat",
    "django_filters",
    "ckeditor",
    "ckeditor_uploader",
    "django_jalali",
    "jalali_date",
    "taggit",
    "djmoney",
]

INSTALLED_APPS = (
    [
        "django.contrib.admin",
        "django.contrib.auth",
        "django.contrib.contenttypes",
        "django.contrib.sessions",
        "django.contrib.messages",
        "django.contrib.staticfiles",
        "django.contrib.sites",
    ]
    + THIRD_PARTY_APPS
    + EVENT_ABOZAR_APPS
)

CSRF_TRUSTED_ORIGINS = config("CSRF_TRUSTED_ORIGINS", cast=Csv())
CORS_ALLOW_ALL_ORIGINS = True

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": config(
        "MAIN_DATABASE",
        default="sqlite:///" + str(BASE_DIR / "db.sqlite3"),
        cast=db_url,
    )
}

AUTH_USER_MODEL = "account.User"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "fa"

TIME_ZONE = os.getenv("TIME_ZONE", default="Asia/Tehran")

USE_I18N = True
USE_L10N = True
USE_TZ = True

# Persian language support
LANGUAGES = [
    ("fa", "فارسی"),
    ("en", "English"),
]

LOCALE_PATHS = [
    os.path.join(BASE_DIR, "locale"),
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

REST_FRAMEWORK = {
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": [
        "django_filters.rest_framework.DjangoFilterBackend",
    ],
}

SPECTACULAR_SETTINGS = {
    "TITLE": "API یازدهمین جشنواره رسانه‌ای ابوذر",
    "DESCRIPTION": """
    ## مستندات API جشنواره ابوذر
    
    این API برای مدیریت یازدهمین جشنواره رسانه‌ای ابوذر طراحی شده است.
    
    ### امکانات اصلی:
    - 🎭 **ثبت‌نام جشنواره**: ثبت‌نام کاربران در جشنواره
    - 📰 **مدیریت محتوا**: اخبار، آموزش‌ها و رویدادها  
    - 🏛️ **اطلاعات جغرافیایی**: استان‌ها و شهرهای ایران
    - 👤 **مدیریت کاربران**: احراز هویت و پروفایل
    - 📊 **گزارش‌گیری**: آمار و اطلاعات ثبت‌نام‌ها
    
    ### نحوه استفاده:
    1. برای دسترسی به endpoint های محافظت شده، ابتدا احراز هویت کنید
    2. از فیلترها و جستجو برای یافتن اطلاعات مورد نظر استفاده کنید
    3. داده‌ها به صورت صفحه‌بندی شده ارائه می‌شوند
    
    🔗 **پشتیبانی**: تیم فنی جشنواره ابوذر
    """,
    "VERSION": "1.0.0",
    "COMPONENT_SPLIT_REQUEST": True,
    "CONTACT": {"name": "تیم فنی جشنواره ابوذر", "email": "support@abozar-festival.ir"},
    "LICENSE": {"name": "جشنواره رسانه‌ای ابوذر"},
    "TAGS": [
        {
            "name": "Festival Registration",
            "description": "🎭 عملیات مربوط به ثبت‌نام در جشنواره",
        },
        {
            "name": "Content Management",
            "description": "📰 مدیریت محتوای سایت (اخبار، آموزش، رویداد)",
        },
        {
            "name": "Province & City",
            "description": "🏛️ اطلاعات استان‌ها و شهرهای ایران",
        },
        {"name": "User Management", "description": "👤 مدیریت کاربران و احراز هویت"},
    ],
    "SERVE_INCLUDE_SCHEMA": False,
    "SWAGGER_UI_SETTINGS": {
        "deepLinking": True,
        "persistAuthorization": True,
        "displayOperationId": False,
        "filter": True,
        "requestSnippetsEnabled": True,
        "defaultModelsExpandDepth": 2,
        "defaultModelExpandDepth": 2,
    },
}

CKEDITOR_UPLOAD_PATH = "uploads/"
CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": "Custom",
        "toolbar_Custom": [
            ["Bold", "Italic", "Underline"],
            [
                "NumberedList",
                "BulletedList",
                "-",
                "Outdent",
                "Indent",
                "-",
                "JustifyLeft",
                "JustifyCenter",
                "JustifyRight",
                "JustifyBlock",
            ],
            ["Link", "Unlink"],
            ["RemoveFormat", "Source"],
            ["Format", "Font", "FontSize"],
            ["TextColor", "BGColor"],
            ["Blockquote"],
        ],
        "height": 300,
        "width": "100%",
        "removePlugins": "stylesheetparser",
        "allowedContent": True,
        "extraPlugins": "codesnippet",
    },
}

KAVENEGAR_API_KEY = os.getenv("KAVENEGAR_API_KEY")

MERCHANT_ID = os.getenv("MERCHANT_ID")

VERIFY_URL = "https://api.brisf.ir/zarinpal/verify_transaction/"
FRONT_VERIFY = "https://brisf.ir/payment/verify/"


CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
REDIS_CACHE = os.getenv("REDIS_CACHE")
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_BACKEND = CELERY_BROKER_URL

BACK_URL = config("BACK_URL")

IS_TEST = config("IS_TEST", cast=bool)
if IS_TEST:
    CELERY_TASK_ALWAYS_EAGER = True  # Executes tasks synchronously
    CELERY_TASK_EAGER_PROPAGATES = True  # Propagates exceptions


CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_CACHE,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}

from datetime import timedelta

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_HEADER_TYPES": ("Bearer",),
}
